#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    behaviors {
        mayus: mayus_tap_dance {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&caps_word>, <&kp CAPSLOCK>;

            label = "mayus_tap_dance";
        };

        game: game_tap_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "game_tap_dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_WIN>, <&none>, <&to 3>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &kp Q    &kp W    &kp E    &kp R    &kp T    &kp ESC        
                &kp Y    &kp U    &kp I    &kp O    &kp P    &kp LBKT       
                &kp A    &kp S    &kp D    &kp F    &kp G    &kp LSHFT      
                &kp H    &kp J    &kp K    &kp L    &kp SEMI &kp RBKT       
                &kp Z    &kp X    &kp C    &kp V    &kp B    &kp LCTRL      
                &kp N    &kp M    &kp COMMA &kp DOT  &kp MINUS &kp RSHFT   
                &mo LOWER  &kp SPACE  &kp LALT                               
                &mo RAISE  &kp ENTER  &kp BSPC                              
            >;
        };

        lower_layer {
            bindings = <
                &kp N1   &kp N2    &kp N3    &kp N4    &kp N5    &none      
                &none    &kp N6    &kp N7    &kp N8    &kp N9    &kp N0      
                &none    &none     &none     &none     &none     &none      
                &none    &none     &none     &none     &none     &none      
                &none    &none     &none     &none     &none     &none      
                &none    &none     &none     &none     &none     &none      
                &mo LOWER  &kp SPACE  &kp LALT
                &mo RAISE  &kp ENTER  &kp BSPC
            >;
        };

        raise_layer {
            bindings = <
                &kp EXCL   &kp DQT    &kp HASH   &kp DLLR   &kp PRCNT  &none   
                &none      &kp AMPS   &kp FSLH   &kp LPAR   &kp RPAR   &kp PLUS 
                &none      &none      &none      &none      &none      &none   
                &none      &none      &none      &kp QMARK  &kp AT     &kp BSLH 
                &none      &none      &none      &none      &none      &none   
                &none      &none      &kp SEMI   &kp COLON  &kp UNDER  &none   
                &mo LOWER  &kp SPACE  &kp LALT
                &mo RAISE  &kp ENTER  &kp BSPC
            >;
        };
    };
};
